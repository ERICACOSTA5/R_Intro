[
["intro.html", "1 Introducción 1.1 Instalación de programas 1.2 Configuraciones básicas del RStudio 1.3 Instalación de paquetes 1.4 Configuración de la sesión 1.5 R como calculadora 1.6 Funciones 1.7 S.O.S.!! 1.8 Tablas resumen", " 1 Introducción 1.1 Instalación de programas 1° R 2° R Studio (bajar la versión Free) 1.2 Configuraciones básicas del RStudio 1.3 Instalación de paquetes Existen varias vias de instalación de paquetes: Via CRAN (Comprehensive R Archive Network): install.packages(\"nombre_del_paquete\") O simplemente en el panel de paquetes. Paquetes no oficiales via Github: devtools::install_github(\"rstudio/epiphy\") Una vez instalado, hay que cargar los paquetes que contienen las funciones que vayamos a usar en cada sesión library(nombre-del-paquete) 1.4 Configuración de la sesión Varios tipos de archivos serán creados y usados durante una sesión de R: datos crudos (hojas de cálculo) - datos manipulados scripts gráficos reportes de resultados Una sesión de análisis debe poder ser retomada en cualquier momento pudiendo darse por concluída cuando el trabajo es publicado. Hasta entonces debemos tener rápido acceso a todos los objetos creados en sesiones anteriores. Para ello debemos manejarnos siempre bajo buenas prácticas de trabajo. Esto nos permitirá entender que quisimos hacer tiempo atrás, seremos intuitivos para encontrar archivos/objetos, y finalmente crearemos trabajos reproducibles… Una forma práctica de administrar todos los objetos que una sesión es crear un proyecto de R para cada sesión. Una sugerencia es generar subcarpetas en nuestras máquinas, en preferencia dentro de dropbox / google drive. Esto no solo mantendrá nuestro trabajo resguardado de posibles pérdidas (backup), retomarlo desde diferentes maquinas (trabajo/casa), sino que también le permitirá compartir en tiempo real sus avances con los colaboradores de su trabajo. Crear una carpeta Intro_R en sus máquinas Crear una nuevo proyecto “Intro_R.Rproj” Crear un script “1_intro” Donde se guardaria el siguiente gráfico? plot(pressure) 1.5 R como calculadora Ver tablas resumen de operadores aritméticos y lógicos (al final del capítulo) 4 + 9 4 - 3 * 1 # 4%1 4&gt;3 4 == 3 4 == 4 (4 + 5 ) * 7 - (36/18)^3 Está bien la siguiente expresión? 5 + 3 * 10 %/% 3 == 15 Agregue parentesis para que la expresión de un resultado contrario. Rendimiento de trigo en función de la severidad de fusariosis de la espiga (Madden and Paul 2009) El intercepto de la regresión lineal estimada (rendimiento de trigo libre de enfermedad) fue de 4.10 t/ha, y la pendiente fue de 0.038 t/ha por unidad de aumento de la severidad de la enfermedad. El tipo de trigo tuvo efecto significativo en el intercepto pero no en la pendiente: trigo de invierno tuvo, en promedio, 0.85 t/ha mas rendimiento que el trigo de primavera. 4.1 - 0.038 * 10 (1-(3.72/4.1))*100 Cuanto seria el rendimiento de ambas variedades de trigo con 1, 10 o 20% de severidad de la enfermedad? Algunos cálculos sqrt(3) # 3^0.5 2^(1/3) # ^(1/n) log(10) log(10, base=10) round(4.3478, digits=3) # ceiling(4.3478) floor(4.3478) (Note que R está en inglés (decimales “.”, nombre de las funciones) y es “case sensitive”!!) 1.6 Funciones Una función es un conjunto de sentencias organizadas conjuntamente para realizar una tarea específica. Los paquetes son basicamente un set de funciones generadas por los autores de los mismos pero el usuario puede crear sus propias funciones. La sintaxis básica de una función de R es la siguiente nombre_funcion &lt;- function(arg_1, arg_2, ...) { cuerpo_de_la_función output # return() } Las diferentes partes de una función son: Nombre de la función: este es el nombre real de la función. Se almacena en el entorno R como un objeto con este nombre. Generalmente, elnombre es intuitivo, por ejemplo, mean es la función que calcula la media, round es la funión que redondea un número. Argumentos - Un argumento es un marcador de posición. Cuando se invoca una función, se pasa un valor al argumento. Los argumentos son opcionales; es decir, una función no puede contener argumentos. También los argumentos pueden tener valores por defecto. Cuerpo de la función: el cuerpo de la función contiene una colección de sentencias que definen lo que hace la función. Valor de retorno: el valor de retorno de una función es la última expresión en el cuerpo de la función que se va a evaluar. numb &lt;- 1:6 round(mean(numb)) # floor() # ceiling() trunc() Si es necesario, el usuario puede generar sus propias funciones. Un clásico ejemplo de la utilidad de estas funciones “user-defined” es la preparación de soluciones partiendo de un stock o fuente a diluir, usando la equivalencia: \\[c1 * v1 = c2 * v2\\] Obviamente tanto \\(c1;c2\\), como \\(v1;v2\\), están en las mismas unidades. Para nuestra comodidad \\(c=\\%\\) y \\(v=ml\\). Nos indican que preparemos 500 ml de una solución desinfectante de NaOCl al 5%, partiendo de una lavandina concentrada (55 g Cl/L). La pregunta que del millón es: qué volumen de lavandina preciso? Por lo tanto debemos despejar V1 de la equivalencia, o sea, sería nuestro output de nuestra función. Empecemos los cálculos: Si el NaOCl tiene un peso molecular de 74.5 g y el Cl pesa 35.5 g, este representa el 47.6% de la molécula de NaOCl. Por lo tanto podemos decir que la lavandina comercial posee x NaOCl = Cl/0.476 en 1 L, o bien x NaOCl % = x NaoCl/10 Si deseamos preparar 500 ml de NaOCl al 5% para la desinfección (2.5% de Cl activo, aprox.) debemos obtener: \\[v1 = (c2*v2)/c1\\] vol_lavandina &lt;- function(c1, c2, v2){ c1 &lt;- (c1/0.476)/10 # pasar g/L a % c2 &lt;- c2 # concentración que me pide el protocolo (%) v2 &lt;- v2 # volumen de la solución que deseo (ml) v1 &lt;- (c2*v2)/c1 # aliquota que debo usar return(paste(&quot;Coloque&quot;, round(v1,1), &quot;ml de lavandina y enrase con agua hasta completar&quot;, v2, &quot;ml&quot;)) } vol_lavandina(55, # g cloro / L (Lavandina) 5, # % ClONa deseada 500) # ml de la solución deseada ## [1] &quot;Coloque 216.4 ml de lavandina y enrase con agua hasta completar 500 ml&quot; Al reportar los resultados de los test de comparaciones de medias obtenidas luego del análisis de varianza es interesante agregar en los párrafos de los resultados cuánto incremento o se redujo un tratamiento en referencia a un testigo en términos porcentuales. Genere una función que permita realizar estos cálculos. Tome como ayuda este link para cotejar sus resultados. 1.7 S.O.S.!! En el mismo R: ?auc; ??auc; F1 sobre la función Googlear: “r generate a sequence of uppercase letters” Stack Overflow: foros de pregunta y respuesta ampliamente utilizados por todos los lenguajes de programación. En algunos paises, llegan hasta a usar la reputación de los usuarios como diferencial en el currículum! ¿Cómo hacer una buena pregunta en el stack overflow? Ser consciso pero gentil… Ser reproducible: su código debe correr en cualquier maquina. La comunidad no irá a ayudarle si no pueden reproducir su error (detallar paquetes y version de R en caso necesario) library(reprex). 1.8 Tablas resumen Table 1.1: Operadores aritméticos Operador Detalle x + y Suma de x e y x - y Resta de x menos y x * y Multiplicación x / y División de x por y x %/% y Parte entera de la división de x por y x %% y Resto de la división de x por y x ^ y x elevado a y-ésima potencia Table 1.2: Operadores lógicos Operador Prueba.lógica x &lt; y x menor que y? x &lt;= y x menor o igual que y? x &gt; y x mayor que y? x &gt;= y x mayor o igual que y? x == y x igual que y? x != y x diferente que y? Table 1.3: Funciones matemáticas Operador Detalle sqrt(x) raiz de x exp(y) exponencial de y log(x) logaritmo natural de x = ln log10(x) Logaritmo base 10 de x sum(x) suma todos los elementos de x prod(x) producto de todos los elementos de x round(x, n) redondea x a n-digitos Table 1.4: Algunos atajos comúnentes usados Teclas Detalle Alt+Shift+K panel de todos los atajos Ctrl+Z / Ctrl+Shift+Z undo/redo Alt+ - &lt;- Ctrl+r corre la linea/bloque completa de codigo Ctrl+l limpia la consola Ctrl+Shift+c silencia la linea Ctrl+i indexa el bloque de código Referencias "]
]
