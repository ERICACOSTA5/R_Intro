[
["index.html", "Introducción a R Motivación", " Introducción a R Motivación “Una de las cosas más importantes que puedes hacer es dedicar un tiempo para aprender un lenguaje de programación. Aprender a programar es como aprender otro idioma: requiere tiempo y entrenamiento, y no hay resultados prácticos inmediatos. Pero si superas esa primera subida empinada de la curva de aprendizaje, las ganancias como científico son enormes. Programar no sólo te liberará de la camisa de fuerza de los softwares estadísticos cerrados, sino que también agudizará tus habilidades analíticas y ampliará los horizontes de modelado ecológico y estadístico.” ~ Adaptación de (Ellison and Gotelli 2004) ~ Podríamos resumir nuestro trabajo como científicos, desde la recolección de datos en el campo, hasta su divulgación a través del siguiente esquema: ~ Adaptación de “R for Data Science” (Wickham and Grolemund 2016) ~ Objetivos El curso pretende proveer herramientas de programación básicas para llevar adelante el proceso de investigación tomando como base el esquema de trabajo anterior. Para ello, usaremos datos (reales o simulados) típicos del área de Ciencias Agrarias. Importante: i) no es un curso de estadística; ii) entendemos la programación como un simple medio para optimizar nuestra labor cotidiana (no como un fin mismo), al final del día seguiremos siendo fitopatólogos, fisiólogos, bioquímicos, etc.; y iii) maximizaremos la adopción de la filosofia tidyverse Por qué R? (R Core Team 2017) 1 Software libre - multiplataforma 2 Aprender un lenguaje de programación: ejercicio mental/lógica (Aprender estadística resulta mucho mas ameno) 3 Software actualizado y con una amplia gama de paquetes específicos (drc, agricolae, epiphy…) 4 Gran flexibilidad y elegancia de los gráficos 5 Popularidad - Comunidad activa y creciente dispuesta a ayudar (aprendemos a usar terminos técnicos de ciencia de datos en inglés) 6 Programar ya no es solo computación (CV/relevant skills) Autor Juan Pablo Edwards Molina: Investigador - Epidemiología de enfermedades de cultivos (IPAVE / INTA). Email: edwardsmolina@gmail.com ORCID: https://orcid.org/0000-0002-3685-760X Twitter: juanchiem GitHub: https://github.com/juanchiem Este obra está licenciado com uma Licença Creative Commons Atribuição-NãoComercial-SemDerivações 4.0 Internacional. Referencias "],
["intro.html", "1 Introducción 1.1 Instalación de programas 1.2 Configuraciones básicas del RStudio 1.3 Instalación de paquetes 1.4 Configuración de la sesión 1.5 R como calculadora 1.6 Funciones 1.7 S.O.S.!! 1.8 Tablas resumen", " 1 Introducción 1.1 Instalación de programas 1° R 2° R Studio (bajar la versión Free) 1.2 Configuraciones básicas del RStudio 1.3 Instalación de paquetes Existen varias vias de instalación de paquetes: Via CRAN (Comprehensive R Archive Network): install.packages(\"nombre_del_paquete\") O simplemente en el panel de paquetes. Paquetes no oficiales via Github: devtools::install_github(\"rstudio/epiphy\") Una vez instalado, hay que cargar los paquetes que contienen las funciones que vayamos a usar en cada sesión library(nombre-del-paquete) 1.4 Configuración de la sesión Varios tipos de archivos serán creados y usados durante una sesión de R: datos crudos (hojas de cálculo) - datos manipulados scripts gráficos reportes de resultados Una sesión de análisis debe poder ser retomada en cualquier momento pudiendo darse por concluída cuando el trabajo es publicado. Hasta entonces debemos tener rápido acceso a todos los objetos creados en sesiones anteriores. Para ello debemos manejarnos siempre bajo buenas prácticas de trabajo. Esto nos permitirá entender que quisimos hacer tiempo atrás, seremos intuitivos para encontrar archivos/objetos, y finalmente crearemos trabajos reproducibles… Una forma práctica de administrar todos los objetos que una sesión es crear un proyecto de R para cada sesión. Una sugerencia es generar subcarpetas en nuestras máquinas, en preferencia dentro de dropbox / google drive. Esto no solo mantendrá nuestro trabajo resguardado de posibles pérdidas (backup), retomarlo desde diferentes maquinas (trabajo/casa), sino que también le permitirá compartir en tiempo real sus avances con los colaboradores de su trabajo. Crear una carpeta Intro_R en sus máquinas Crear una nuevo proyecto “Intro_R.Rproj” Crear un script “1_intro” Donde se guardaria el siguiente gráfico? plot(pressure) 1.5 R como calculadora Ver tablas resumen de operadores aritméticos y lógicos (al final del capítulo) 4 + 9 4 - 3 * 1 # 4%1 4&gt;3 4 == 3 4 == 4 (4 + 5 ) * 7 - (36/18)^3 Está bien la siguiente expresión? 5 + 3 * 10 %/% 3 == 15 Agregue parentesis para que la expresión de un resultado contrario. Rendimiento de trigo en función de la severidad de fusariosis de la espiga (Madden and Paul 2009) El intercepto de la regresión lineal estimada (rendimiento de trigo libre de enfermedad) fue de 4.10 t/ha, y la pendiente fue de 0.038 t/ha por unidad de aumento de la severidad de la enfermedad. El tipo de trigo tuvo efecto significativo en el intercepto pero no en la pendiente: trigo de invierno tuvo, en promedio, 0.85 t/ha mas rendimiento que el trigo de primavera. 4.1 - 0.038 * 10 (1-(3.72/4.1))*100 Cuanto seria el rendimiento de ambas variedades de trigo con 1, 10 o 20% de severidad de la enfermedad? Algunos cálculos sqrt(3) # 3^0.5 2^(1/3) # ^(1/n) log(10) log(10, base=10) round(4.3478, digits=3) # ceiling(4.3478) floor(4.3478) (Note que R está en inglés (decimales “.”, nombre de las funciones) y es “case sensitive”!!) 1.6 Funciones Una función es un conjunto de sentencias organizadas conjuntamente para realizar una tarea específica. Los paquetes son basicamente un set de funciones generadas por los autores de los mismos pero el usuario puede crear sus propias funciones. La sintaxis básica de una función de R es la siguiente nombre_funcion &lt;- function(arg_1, arg_2, ...) { cuerpo_de_la_función output # return() } Las diferentes partes de una función son: Nombre de la función: este es el nombre real de la función. Se almacena en el entorno R como un objeto con este nombre. Generalmente, elnombre es intuitivo, por ejemplo, mean es la función que calcula la media, round es la funión que redondea un número. Argumentos - Un argumento es un marcador de posición. Cuando se invoca una función, se pasa un valor al argumento. Los argumentos son opcionales; es decir, una función no puede contener argumentos. También los argumentos pueden tener valores por defecto. Cuerpo de la función: el cuerpo de la función contiene una colección de sentencias que definen lo que hace la función. Valor de retorno: el valor de retorno de una función es la última expresión en el cuerpo de la función que se va a evaluar. numb &lt;- 1:6 round(mean(numb)) # floor() # ceiling() trunc() Si es necesario, el usuario puede generar sus propias funciones. Un clásico ejemplo de la utilidad de estas funciones “user-defined” es la preparación de soluciones partiendo de un stock o fuente a diluir, usando la equivalencia: \\[c1 * v1 = c2 * v2\\] Obviamente tanto \\(c1;c2\\), como \\(v1;v2\\), están en las mismas unidades. Para nuestra comodidad \\(c=\\%\\) y \\(v=ml\\). Nos indican que preparemos 500 ml de una solución desinfectante de NaOCl al 5%, partiendo de una lavandina concentrada (55 g Cl/L). La pregunta que del millón es: qué volumen de lavandina preciso? Por lo tanto debemos despejar V1 de la equivalencia, o sea, sería nuestro output de nuestra función. Empecemos los cálculos: Si el NaOCl tiene un peso molecular de 74.5 g y el Cl pesa 35.5 g, este representa el 47.6% de la molécula de NaOCl. Por lo tanto podemos decir que la lavandina comercial posee x NaOCl = Cl/0.476 en 1 L, o bien x NaOCl % = x NaoCl/10 Si deseamos preparar 500 ml de NaOCl al 5% para la desinfección (2.5% de Cl activo, aprox.) debemos obtener: \\[v1 = (c2*v2)/c1\\] vol_lavandina &lt;- function(c1, c2, v2){ c1 &lt;- (c1/0.476)/10 # pasar g/L a % c2 &lt;- c2 # concentración que me pide el protocolo (%) v2 &lt;- v2 # volumen de la solución que deseo (ml) v1 &lt;- (c2*v2)/c1 # aliquota que debo usar return(paste(&quot;Coloque&quot;, round(v1,1), &quot;ml de lavandina y enrase con agua hasta completar&quot;, v2, &quot;ml&quot;)) } vol_lavandina(55, # g cloro / L (Lavandina) 5, # % ClONa deseada 500) # ml de la solución deseada ## [1] &quot;Coloque 216.4 ml de lavandina y enrase con agua hasta completar 500 ml&quot; Al reportar los resultados de los test de comparaciones de medias obtenidas luego del análisis de varianza es interesante agregar en los párrafos de los resultados cuánto incremento o se redujo un tratamiento en referencia a un testigo en términos porcentuales. Genere una función que permita realizar estos cálculos. Tome como ayuda este link para cotejar sus resultados. 1.7 S.O.S.!! En el mismo R: ?auc; ??auc; F1 sobre la función Googlear: “r generate a sequence of uppercase letters” Stack Overflow: foros de pregunta y respuesta ampliamente utilizados por todos los lenguajes de programación. En algunos paises, llegan hasta a usar la reputación de los usuarios como diferencial en el currículum! ¿Cómo hacer una buena pregunta en el stack overflow? Ser consciso pero gentil… Ser reproducible: su código debe correr en cualquier maquina. La comunidad no irá a ayudarle si no pueden reproducir su error (detallar paquetes y version de R en caso necesario) library(reprex). 1.8 Tablas resumen Table 1.1: Operadores aritméticos Operador Detalle x + y Suma de x e y x - y Resta de x menos y x * y Multiplicación x / y División de x por y x %/% y Parte entera de la división de x por y x %% y Resto de la división de x por y x ^ y x elevado a y-ésima potencia Table 1.2: Operadores lógicos Operador Prueba.lógica x &lt; y x menor que y? x &lt;= y x menor o igual que y? x &gt; y x mayor que y? x &gt;= y x mayor o igual que y? x == y x igual que y? x != y x diferente que y? Table 1.3: Funciones matemáticas Operador Detalle sqrt(x) raiz de x exp(y) exponencial de y log(x) logaritmo natural de x = ln log10(x) Logaritmo base 10 de x sum(x) suma todos los elementos de x prod(x) producto de todos los elementos de x round(x, n) redondea x a n-digitos Table 1.4: Algunos atajos comúnentes usados Teclas Detalle Alt+Shift+K panel de todos los atajos Ctrl+Z / Ctrl+Shift+Z undo/redo Alt+ - &lt;- Ctrl+r corre la linea/bloque completa de codigo Ctrl+l limpia la consola Ctrl+Shift+c silencia la linea Ctrl+i indexa el bloque de código Referencias "],
["data-type.html", "2 Datos: tipos y estructuras 2.1 Tipos de datos 2.2 Estructura de datos", " 2 Datos: tipos y estructuras 2.1 Tipos de datos La unidad básica de datos en R es un vector, los cuales pueden ser de diferentes clases. Los que más usaremos son las siguientes cuatro clases. Clase Ejemplo numeric c(12.3, 5, 999) logical c(TRUE, FALSE) integer c(2L, 34L, 0L) character c(‘a’, ‘good’, ‘TRUE’, ‘23.4’) 2.1.1 Vectores # concatenación de elementos atómicos v &lt;- c(8, 7, 9, 10, 10, 111) class(v) (b &lt;- c(&quot;A&quot;, &quot;b&quot;)) class(b) is.character(b) is.numeric(b) (m &lt;- c(TRUE, FALSE, T, F)) ; class(m) # Propiedades de v # ?length length(v) summary(v) #v &lt;- edit(v) sort(v) Operaciones con vectores v - 1 # Medidas de posición mean(v) median(v) # Medidas de dispersión var(v) sd(v) sqrt(var(v)) IQR(v) range(v) quantile(v, 0.1) ecdf(v)(7) max(v) min(v) sum(v) Cree tres nuevos vectores que sean: i) la potencia cuadrada de 3.5 de v; ii) la raiz cubica de v; iii) el logaritmo natural de la diferencia de i) y ii) Secuencia 1:7 seq(from = 0, to = 20, #by=2) # length=4) rep(1:3, times=3) # , each=3 2.1.2 Números aleatorios La generación de números aleatorios es en muchas ocasiones un requerimiento esencial en investigación científica. Proceder de este modo puede reducir cualquier sesgo generado por nuestra persona a la hora de seleccionar una muestra, o aplicar un tratamiento a una unidad experimental. Generar números enteros de modo aleatorio de una muestra determinada sample() sample(1:30, size=10, replace=F) #sin reposición Generar numeros aleatorios de una distribución especifica de parámetros conocidos: runif() - números racionales aleatoriamente, uniformemente distribuidos en un intervalo num_unif &lt;- runif(100, min=3, max=4) hist(num_unif) rnorm() - números aleatorios, pertenecientes a una población con distribución normal, con parámetros μ y σ. num_norm &lt;- rnorm(100, mean=70, sd=5) hist(num_norm) Vamos a recrear estas muestras partiendo de la información contenida en la tabla (Parra-Bracamonte et al. 2007) set.seed(123) PesoNac &lt;- rnorm(23570, mean=32.2, sd=1.8) range(PesoNac) hist(PesoNac) hist(PesoNac, prob=TRUE) Propiedades de vectores Si colocaramos dos o mas clases diferentes dentro de un mismo vector, R va forzar a que todos los elementos pasen a pertenecer a una misma clase. El número 1.7 cambiaria a “1.7” se fuera creado junto con “a”. y &lt;- c(1.7, &quot;a&quot;) ## character y &lt;- c(TRUE, 2) ## numeric y &lt;- c(TRUE, &quot;a&quot;) ## character Forzando las clases explicitamente as.character(), as.numeric(), as.integer() y as.logical() Factores Conceptualmente, en R, los factores son variables categóricas con un número finito de valores o niveles (levels). Son variables clasificadoras o agrupadoras de los nuestros datos. Uno de los usos más importantes de los factores es en el modelado estadístico, dado que estos son considerados de manera diferente a las variables continuas. Claro ejemplo de factores son los tratamientos, por ej: fungicidas, genotipos, bloques, etc. Los niveles de un factor puede estar codificados como valores numéricos o como caracteres (labels). Independientemente de que el factor sea numérico o carácter, sus valores son siempre almacenados internamente por R como números enteros, con lo que se consigue economizar memoria. Podemos comprobar que la ordenación de los niveles es simplemente alfabética. clones = c(&quot;control&quot;, &quot;B35&quot;, &quot;A12&quot;, &quot;T99&quot;, &quot;control&quot;, &quot;A12&quot;, &quot;B35&quot;, &quot;T99&quot;, &quot;control&quot;, &quot;A12&quot;, &quot;B35&quot;, &quot;T99&quot;, &quot;control&quot;) class(clones) levels(clones) clones_f = factor(clones) levels(clones_f) table(clones_f) En general deseamos algun orden especifico de nuestros niveles del factor, por ej: clones_f_ord &lt;- factor(clones_f, levels=c(&quot;control&quot;, &quot;B35&quot;, &quot;A12&quot;, &quot;T99&quot;)) table(clones_f_ord) Las variables numéricas y de caracteres se pueden convertir en factores (factorizar), pero los niveles de un factor siempre serán valores de caracteres. Podremos verlo en el siguiente ejemplo: vec &lt;- c(3, 5, 7, 1) sum(vec);mean(vec) vec_f &lt;- factor(vec) vec_f levels(vec_f) vec_n &lt;- as.numeric(vec_f) vec_f vec_n sum(vec_n); mean(vec_n) Hemos recuperado los valores numericos originales (vec)? que representan los numeros codificados por R en vec_f? vec_f1 = as.numeric(as.character(vec_f)) sum(vec_f1);mean(vec_f1) Indexación y &lt;- 1:10 y[ ] y[2] y[1:3] Seleccione los elementos 1° y 3° Condición # ifelse(condición, valor_si_TRUE, valor_si_FALSE) ifelse(y&lt;2, &quot;Low&quot;, &quot;High&quot;) Se evaluaron 10 clones de porta-injertos de cítricos según su resistencia a Gomosis del Tronco (Phytophthora parasitica). Los diámetros de la lesión (cm) en el punto de inoculación fueron: 3, 6, 1, 10, 3, 15, 5, 8, 19, 11. Crear un vector “resist” con las categorías S o R, “S” aquellos clones con lesiones por encima de la mediana, y “R” clones con lesiones por debajo de la mediana. 2.1.3 Valores especiales Existen valores reservados para representar datos faltantes, infinitos, e indefiniciones matemáticas. NA (Not Available) significa dato faltante/indisponible. El NA tiene una clase, o sea, pueden ser NA numeric, NA character, etc. y &lt;- c(2, 4, NA, 6) is.na(y) Calcule el promedio de y (use la ayuda de R en caso necesario)mean(y) NaN (Not a Number) es el resultado de una operación matemática inválida, ej: 0/0 y log(-1). Un NaN es un NA, pero no reciprocamente. 0/0 is.nan(0/0) is.na(0/0) NULL es el vacio de R. Es como si el objeto no existiese a = NULL a Inf (infinito). Es el resultado de operaciones matemáticas cuyo limite es infinito, es decir, es un número muy grande, por ejemplo, 1/0 o 10^310. Acepta signo negativo -Inf. 1/0 1/Inf 2.2 Estructura de datos 2.2.1 Data frames Conjunto de observaciones (filas) y variables (columnas). A diferencia que en las matrices, las columnas pueden tener diferentes tipos (clases) de variables como por ejemplo numéricas, categóricas, lógicas, fechas. Un dataframe es completo con dimensiones n_fila x p_columna, donde: 1- Cada fila debe contener toda la info de la unidad experimental que se está evaluando 2- Cada columna representa una variable (descriptiva o respuesta) 3- Cada celda debe tener su observación (en caso de faltar el dato será un NA) En numerosos paquetes de R, hay data frames disponibles para ejemplos de aplicación de funciones. Un ejemplo muy usado, que está en el paquete base es el dataset “iris”. ?iris View(iris) # ya activo desde inicio de sesión por default Explore el dataset iris con las siguientes funciones con iris y anote sus resultados: head(); tail(); dim(); names(); str(); row.names() Filtrado de datasets data[fila, columna] iris[1,] iris[,1] iris[1,1] iris$Sepal.Length levels(iris$Species) summary(iris$Sepal.Length) Selecione la segunda i) fila; ii) columna. iii) Seleccione la observación ubicada en la 2° fila y 3° columna iv) Seleccione las observaciones de las lineas 50 a 60 de las columnas 3 y 4. Función subset Filtremos a la variedad Species reteniendo solo a “setosa” iris_setosa &lt;- subset(iris, Species==&quot;setosa&quot;) Filtremos a la variedad Species reteniendo solo a “setosa” + “virginica” iris_set.virginica &lt;- subset(iris, Species %in% c(&quot;setosa&quot;, &quot;virginica&quot;)) Agreguemos una condición: a lo anterior quedemonos con aquellas filas en que Sepal.Length &gt; 5 iris2 &lt;- subset(iris, Species %in% c(&quot;setosa&quot;, &quot;virginica&quot;) &amp; Sepal.Length &gt; 5) Que pasa si cambiamos el operador &amp; por |? 2.2.2 Listas Objetos que aceptan elementos de clases diferentes. x &lt;- list(a = 1:5, b = c(&quot;a&quot;, &quot;b&quot;), c = TRUE) x (Mas info de subsetting elementos de una lista aqui) x$a # x[1] # #sum(x[1]) x[[1]] # sum(x[[1]]) x[&quot;c&quot;] # Referencias "],
["import.html", "3 Importar 3.1 Organización de planillas a ser importadas a R 3.2 Vías de importación", " 3 Importar 3.1 Organización de planillas a ser importadas a R Un primer paso en nuestras investigaciones (fundamental, determinante del resto de flujo de trabajo) es la toma de datos. Un buen diseño experimental, con correcta toma de datos de calidad, no garantizan, pero si aumentan significativamente las probabilidades que nuestro trabajo goze de buen porvenir. En particular prefiero que las planillas excel sean similares a las de campo (puede haber discrepancia) ya que muchas veces pedimos a otras personas que pasen los datos por nosotros… R se ocupará de hacer el trabajo sucio de organizar la información una vez importados los datos! 5 Principios básicos Adaptado de (Broman and Woo 2018) Como regla global, columnas (Verticales) son Variables y filas (horizontales) son observaciones (generalmente de unidades experimentales/sujetos individuales) 1 - Consistencia Sean creativos al nombrar las variables: usen 3-4 letras (minúsculas) por palabra y en caso de necesitar usar “_”. No usar acentos ni ñ. Nunca dejen espacios y maximicen el ahorro de letras, siempre y cuando se justifique: severidad = sev incidencia = inc rendimiento = rto hoja = hj (bien podría ser “hoja” también) planta = pl bloque = bq placa = placa temperatura = temp máxima = max En particular prefiero usar el inglés, ya que no tiene acentos ni caracteres especiales. Siempre, siempre, identifiquen hasta el más mínimo detalle de las unidades experimentales (placas, macetas, plantas dentro de las macetas, etc.), al final se recuperará en creces el tiempo extra inicialmente invertido en ello (stand-alone). Adopten siempre los mismos términos No escatimen en columnas: rep_pl -&gt; rep | pl Crear diccionario de términos: Agreguen una planilla con el detalle por extenso de las variables y sus unidades. Piensen que esa planilla la debería entender cualquier persona sin auxilio de sus propios comentarios. 2 - Rectangular Todo set de datos tiene sus dimensiones específicas: n fila - n columnas. Si se perdió alguna parcela/planta por algún motivo extra-tratamiento simplemente es un NA, y asi deben definir esa observación, no poner “muerta” o “perdida” 3 - Cero es un dato! Cero no significa ausencia de observación, en este caso podemos usar “NA”, “-”, “.” o dejar en blanco (si se usa .xlsx) En preferencia, llenen todas las celdas, pero siempre un solo dato por celda… 4 - Planilla plana -&gt; DATOS CRUDOS SIN FORMULAS No combinar celdas no resaltar no hacer bordes sin negritas caracteres puros 3.2 Vías de importación Son múltiples las necesidades y vías de importación de datos a nuestro entorno de sesión de R. Principalmente usaremos planillas excel guardados en nuestra computadora. Estos pueden estar guardados en formato .xlsx (planillas tradicionales) o .csv (texto separado con comas, mucho más livianos). La forma más rápida es vía clicks de mouse en el panel de entorno de la sesión: Buscan el archivo a importar en el explorador de archivos del panel multipropósito de RStudio Hacen click sobre el archivo Seleccionan “import dataset” Configuran las opciones de importación y copian el codigo generado y dan import (es aconsejable que peguen el codigo en el script de la sesión) O bien desde código del script: Archivos excel dat &lt;- readxl::read_excel(&quot;nombre_del_archivo.xls&quot;) # Noten que usamos una función del paquete &quot;readxl&quot;, por lo cual deber ser llamado antes o bien antecediendo el nombre de la función con &quot;::&quot; Importar soja_mancha.xlsx, nombrandolo “soja” Importar can_phoma.xlsx, nombrandolo “canola” “canola” es el dataset de un experimento de canola donde fueron testeados 10 fungicidas (mas un control sin protección con fungicida) con 3 bloques en que se registró el progreso de manchas foliares de Phoma lingam a través del tiempo (tiempo termico desde la detcción de la primera mancha). La unidad experimental está identificada en la variable “par” la que contiene la información del bloque (1° dígito), y tratamiento (2°-3° digitos). Archivos de texto .csv dat &lt;- read.csv(&quot;nombre_del_archivo.csv&quot;, header = TRUE, sep = &quot;,&quot;, dec = &quot;.&quot;)# puede variar el simbolo de como se separan las columnas. Siempre chequear el banco de datos importados. dat &lt;- readr::read_csv(&quot;ruta/nombre_del_archivo.csv&quot;) Desde clipboard Muchas veces necesitamos replicar rapidamente un fragmento del dataset desde excel, o bien un vector lo que es posible mediante: dat = read.delim(&quot;clipboard&quot;, dec=&quot;,&quot;) Desde google sheets: # install.packages(&quot;gsheet&quot;) url &lt;- &quot;https://docs.google.com/spreadsheets/d/1NQ7nd2pOPQYaLzJs1D2-aOB6LDKzv9kjOcKaNeNFjpA/edit?usp=sharing&quot; # browseURL(url) dat &lt;- gsheet::gsheet2tbl(url) dat Crear dataframes tipo SAS (bueno para crear ejemplos reproducibles) dat &lt;- read.table(header=T, text=&#39; Crop x1 x2 x3 x4 Corn 16 27 31 33 Corn 15 23 30 30 Corn 16 27 27 26 Corn 18 20 25 23 Corn 15 15 31 32 Corn 15 32 32 15 Corn 12 15 16 73 Soybean 20 23 23 25 Soybean 24 24 25 32 Soybean 21 25 23 24 Soybean 27 45 24 12 Soybean 12 13 15 42 Soybean 22 32 31 43 &#39;) Colección de datos en archivo .RData Muchas veces en una misma sesión se generan nuevos datasets a partir de uno importado. Al reiniciar una sesión deberia tenerse rapidamente disponibles todos los objetos creados en dias previos los que pueden recopilarse en un archivo de múltiples objetos “.RData” e importarse directamente desde este. save(soja, canola, file=&quot;./data/soja_canola.RData&quot;) Para traerlos nuevamente al entorno de la sesión: load(&quot;./data/soja_canola.RData&quot;) Exportar datasets write.table(dat, &quot;./data/dat.txt&quot;, sep = &quot;\\t&quot;) Referencias "],
["manip.html", "4 Manipular 4.1 dplyr:: 4.2 tidyr:: 4.3 forcats::", " 4 Manipular Muchas veces los datos que importamos ya están listos para ser explorados y analizados. Otras veces precisan ser manipulados previamente para ello. En estos casos se parte de un dataset “crudo” y se transforma hacia un dataset “analítico”. tidyr y dplyr integran parte de la colección de paquetes de tidyverse y facilitan la manipulación de los data frames (Wickham and Grolemund 2016) library(tidyverse) Ambos paquetes utilizan el operador %&gt;% (pipe, tubo en español) lo que proporcionan una mejor interpretación lógica: utiliza el resultado de su lado izquierdo como primer argumento de la función del lado derecho (asemejándose a una receta de torta…) x &lt;- c(1, 2, 3, 4) x %&gt;% sum %&gt;% sqrt Su equivalente de código básico es: sqrt(sum(x)) Importemos “soja” para ver alguno ejemplos. load(&quot;./data/datos_crudos.RData&quot;) # browseURL(&quot;https://osf.io/jpfet/&quot;) 4.1 dplyr:: Los cinco verbos (funciones) principales de dplyr son: select filter mutate arrange summarise 4.1.1 select Vamos a seleccionar las variables: study, year, cultivar, fungic, rep, sev y yield. soja %&gt;% select(study, year, cultivar, fungic, rep, sev, yield) Es posible usar intervalos de varibles con :. Una selección “negativa” de las variables no deseadas daría un mismo resultado: soja %&gt;% select(-Yld_level, -YR_class, -gr_hab, -sev_check) 4.1.2 filter Semejante a subset. Condiciones separadas por comas equivalen a &amp; de subset. Filtremos la variable fungicida (fungic) por el testigo (ZZ_CHECK) soja %&gt;% select(study:yield) %&gt;% filter(fungic == &#39;ZZ_CHECK&#39;) Ahora, agreguemos el fungicida carbendazim a dosis de 1 litro (CZM[1]) al dataset soja %&gt;% select(study:yield) %&gt;% filter(fungic %in% c(&quot;ZZ_CHECK&quot;,&quot;CZM[1]&quot;)) 4.1.3 mutate Alistar los datos crudos recien importados Haremos que las variables tipo caracter sean convertidas a factores: soja &lt;- soja %&gt;% mutate_at(vars(c(&quot;cultivar&quot;, &quot;fungic&quot;,&quot;Yld_level&quot;, &quot;YR_class&quot;, &quot;gr_hab&quot;)), funs(as.factor)) summary(soja) str(soja) canola &lt;- canola %&gt;% mutate_at(vars(c(&quot;trt&quot;,&quot;bk&quot;)), funs(as.factor)) %&gt;% mutate_at(vars(`15`: &quot;sev_cank&quot;), funs(round(., 2))) Creación de nuevas variables (a partir de las existentes) Muchas variables biológicas no cumplen con los supuestos de las pruebas estadísticas paramétricas: no se distribuyen normalmente, las desviaciones estándar no son homogéneas, o ambas. Hay extensa bibliografia al respecto, recomendando cual transformación es la más adecuada para cada tipo de variable y asi poder ser analizada por un ANOVA tradicional (paramétrico). Como fitopatólogos, la no normalidad es lo predominante. El caso mas común es la severidad de enfermedades que comparamos a través de diferentes tratamientos (cultivar, fungicida, practica de manejo, etc.) Dos transformaciones son mayormente sugeridas para la severidad: Transformacion Arcsine:consiste en tomar el arcoseno de la raiz cuadrada de un numero. Transformación logit: soja1 &lt;- soja %&gt;% select(study:yield) %&gt;% filter(fungic %in% c(&quot;ZZ_CHECK&quot;,&quot;CZM[1]&quot;)) %&gt;% mutate(sev_arc = asin(sqrt(sev/100)), sev_logit = car::logit(sev, percents=TRUE),# log(sev/100/(1-sev/100)), # yield_tn = yield/1000) # browseURL(&quot;http://strata.uga.edu/8370/rtips/proportions.html&quot;) soja &lt;- readr::read_csv(&quot;data/soja_mancha.csv&quot;) soja &lt;- soja %&gt;% mutate_if(is.character, as.factor) 4.1.4 arrange Ordena crecientemente de acuerdo a la columna que le indiquemos. Utilizar desc para orden decrescente. soja1 %&gt;% arrange(year, cultivar) soja1 %&gt;% arrange(year, desc(cultivar)) 4.1.5 summarise Generalmente acompañada de la función group_by la cual permite aplicar un cálculo a las observaciones agrupando por niveles de algún factor (equivale a una tabla dinámica de excel) Veamos cuanto fue el rendimiento promedio y el desvio standard para cada fungicida a través de todos los ensayos: soja %&gt;% group_by(fungic) %&gt;% summarise(yield_mean = mean(yield), yield_sd = sd(yield)) Calculen el rendimiento mínimo y máximo por fungicida Algunas funciones interesantes para la descripción del dataset: n(), n_distinct(). Cuantos ensayos fueron realizados por año: soja %&gt;% group_by(year) %&gt;% summarize(n = n_distinct(study)) Cuantas parcelas tenia cada ensayo: soja %&gt;% group_by(study, year, cultivar) %&gt;% summarize(plots = n()) Adicione una columna de potencial de rendimento del ensayo (rend_pot), considerando el máximo rendimiento observado en ese ensayo. Usando la función ifelse cree una nueva variable categórica “presión de enfermedad” considerando a “sev_check”: Low o High by_check = soja %&gt;% filter(fungic==&quot;ZZ_CHECK&quot;) %&gt;% group_by(study) %&gt;% summarize(sev_check = round(mean(sev, na.rm = TRUE),1)) %&gt;% mutate(Dis_level = ifelse(sev_check &lt; 30, &quot;Low&quot;, &quot;High&quot;)) 4.2 tidyr:: Caso canola: canola &lt;- readxl::read_excel(&quot;data/can_phoma.xlsx&quot;) Esto seria uma forma “wide” de representación del dataset (crudo). Para analizar el efecto del tratemiento fungicida necesitamos calcular el área bajo la curva (AUC) del progreso de la enfermedad. Para esto vamos a transponer can_phoma al formato “long”. La función gather (del inglés “reunir”, paquete tidyr) apila las columnas que indiquemos. canola %&gt;% gather(`15`, `58`, `95`, `146`, `165`, `180`, `248`, key = &quot;tt&quot;, value = &quot;inc&quot;) -&gt; can_long # save(soja, canola, can_long, file = &quot;data/soja_canola.RData&quot;) can_long # Precisamos que tt sea clase &quot;numérica&quot; para ciertos cálculos can_long &lt;- can_long %&gt;% mutate_at(c(&quot;trt&quot;,&quot;bk&quot;), funs(as.factor)) %&gt;% mutate_at(c(&quot;tt&quot;, &quot;inc&quot;), funs(as.numeric)) Calcularemos un valor de AUC por parcela con auxilio de las funciones group_by y summarize # if(require(MESS)) {install.packages(&quot;MESS&quot;)} can_long %&gt;% group_by(trt, bk) %&gt;% summarize(AUC = MESS::auc(inc, tt)) Ahora si, can_phoma está listo para entrar al próximo paso: modelado. 4.2.1 join junta dos data.frames a través de puntos en común. Por ejemplo, si queremos unir las variables “sev_check” y “Dis_level” al dataset soja: soja %&gt;% inner_join(by_check, by=&quot;study&quot;) 4.3 forcats:: Es un excelente aliado para manipular factores, principalmente cuando de graficar se trata. link library(forcats) dat %&gt;% mutate(trt1= fct_recode(trt, `Czm` = &quot;CZM[1]&quot;, # `nombre_nuevo` = &quot;nombre_original&quot; `Czm+CM+Tebu` = &quot;CZM_CM_TEBU[1]&quot;, `Epo+Flux+Pyra (0.8L)` = &quot;EPO_FLUX_PYRA[0.8]&quot;, `Check` = &quot;ZZ_CHECK&quot;), trt1= fct_relevel(trt, # Asignar a trt1 nuevo orden de los factores &quot;Check&quot;, &quot;Czm&quot;, &quot;Czm+CM+Tebu&quot;, &quot;Epo+Flux+Pyra (0.8L)&quot;)) %&gt;% ggplot(aes(x, y)) + geom_boxplot()+ load(&quot;data/datos_crudos.RData&quot;) Referencias "],
["fitopato.html", "5 Cálculos fitopatométricos 5.1 Caso 1: carbón del mani 5.2 Caso 2: xylella en olivos", " 5 Cálculos fitopatométricos 5.1 Caso 1: carbón del mani mani &lt;- mani %&gt;% mutate_at(vars(c(&quot;trt&quot;, &quot;sprays&quot;, &quot;bk&quot;)),funs(factor)) mani Exploramos cuantas plantas (sub-muestra) fueron evaluadas por parcela: mani %&gt;% group_by(trt, sprays, bk)%&gt;% summarise(n=n()) #%&gt;% knitr::kable() Calculamos la incidencia por parcela y agregamos una columna para identificar a la planta como sub-muestra dentro de cada parcela: mani1 &lt;- mani %&gt;% mutate( trt = relevel(trt, ref=&quot;check&quot;), dis_pod = rowSums(select(., matches(&#39;x1|x2|x3|x4&#39;))), inc = dis_pod/n_pods, x0_p = rowSums(select(., matches(&#39;x0&#39;)))/n_pods, x3.4 = rowSums(select(., matches(&#39;x3|x4&#39;))), sev0_1 = (0*x0 + 0.01*x1 +0.1*x2 + 0.7*x3 + 1*x4)/ n_pods) %&gt;% group_by(sprays, trt, bk) %&gt;% mutate(sample = row_number()) %&gt;% # filter(sprays!=1, # trt!=&quot;Epoxiconazole&quot;) %&gt;% ungroup mani1 5.2 Caso 2: xylella en olivos Chequeamos cuantos árboles fueron evaluados en cada año/región/lote: ftable(xtabs(~year+loc+farm, olivo)) Imprimimos los 30 árboles de un mismo lote olivo %&gt;% arrange(loc, year) %&gt;% print(n=30) 5.2.1 Incidencia (nivel lote - evolución interanual) dat_inc &lt;- olivo %&gt;% group_by(year, loc, farm) %&gt;% summarise(inc = mean(sev&gt;0, na.rm=TRUE)*100) %&gt;% ungroup %&gt;% arrange(loc, year) dat_inc ggplot(dat_inc, aes(x=factor(year), y=inc, color=factor(farm))) + geom_point() + geom_line(aes(group=farm)) + facet_grid(. ~ loc) 5.2.2 Prevalencia (nivel región - evolución interanual) dat_prev &lt;- dat_inc %&gt;% group_by(year, loc) %&gt;% summarise(prev = trunc(mean(inc&gt;0, na.rm=TRUE)*100)) %&gt;% ungroup %&gt;% arrange(loc,year) dat_prev ggplot(dat_prev, aes(x=factor(year), y=prev, color=factor(loc))) + geom_point() + geom_line(aes(group=loc)) "],
["explore.html", "6 Visualizar 6.1 Comparación de niveles de factores", " 6 Visualizar La visualización de datos es una pieza fundamental del flujo de trabajo del científico, tanto para explorar sus observaciones, como para explicar/comunicar sus resultados e ideas. Es decir, dominar las herramientas de visualización resulta imprescindible para un investigador cuya materia prima son los datos. La gran comunidad de usuarios de R disponibiliza sus creaciones e incluso trabajan en extensiones que amplien la potencialidad de sus paquetes. Se podria afirmar que no hay límites para la creación. Digamos, que no importa el “Cómo?” si no el “Qué?” Algunas pruebas de ello son los siguientes links: The R Graph Gallery Top 50 plots Extensiones de ggplot El paquete ggplot2 tiene una flexibilidad tal que permite generar rápidamente gráficos exploratorios asi como crear figuras complejas, detalladas de alta calidad (con fines de publicaciones científicas). library(tidyverse) Tiene una gramática propia y la idea original es que un gráfico puede ser elaborado a partir de la combinación de capas, pudiendo tener estas diferentes bases de datos y objetos gráficos (puntos, líneas, barras, etc). Agregaremos una a una las capas mencionadas en la figura. Estas no tienen un orden estricto, salvo la primera que debe ser ggplot() que es la funcion que inicializa un grafico. A esta estarán asociada el dataframe principal (ya que un mismo grafico acepta tomar información de distintos datasets), y las aesthetics que o sea pueden haber varias aesthetics Se definen con aes() Significado de aesthetic en ggplot: “Algo que se puede ver” Cada geom acepta un conjunto de aesthetics Ejemplos: + position (i.e., en el eje “x” y “y”) color (color “exterior”) fill (color “interior”) shape (de los puntos) linetype size iris %&gt;% ggplot(aes(x = Sepal.Length, y = Petal.Length)) geoms Objetos geometricos son la representación visual de las observaciones. En general los que le dan el nombre al tipo de gráfico. La lista de “geoms” aumenta día a día. iris %&gt;% ggplot(aes(x=Sepal.Length, y=Petal.Length)) + geom_point() iris %&gt;% ggplot(aes(x=Sepal.Length, y=Petal.Length)) + geom_point(aes(color = Species)) iris %&gt;% ggplot(aes(x=Sepal.Length, y=Petal.Length)) + geom_point(aes(color = Species))+ geom_smooth() iris %&gt;% ggplot(aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()+ geom_smooth() facets Las facetas o “facets” en permiten dividir el mismo gráfico en diferentes niveles de un factor. p &lt;- iris %&gt;% ggplot(aes(x = Sepal.Length, y = Petal.Length)) + geom_point()+ geom_smooth(method = &quot;lm&quot;)+ facet_wrap(~Species) p theme Los temas (theme) son un conjunto de opciones predefinidas sobre la apariencia de los objetos en ggplot. El tema por defecto del ggplot dibuja el gráfico sobre un fondo gris. Podemos cambiarlo a blanco y negro añadiendo el comando theme_bw() p + theme_bw() Si deseamos explorar las distribuciones de las variables podemos optar por un histograma o por diagramas de densidad cowplot::plot_grid( iris %&gt;% ggplot(aes(Petal.Length, fill=Species)) + geom_histogram()+ guides(fill=FALSE) , iris %&gt;% ggplot(aes(Petal.Length, fill=Species)) + geom_density(alpha=0.7) , align=&quot;h&quot; ) 6.1 Comparación de niveles de factores Los graficos de barra, ampliamente usados en publicaciones cientificas, son cada vez mas criticados por “ocultar” la naturaleza de las observaciones (Drummond and Vowler 2011; Weissgerber 2015) (Sugerencia: leer el box 1 del ultimo paper) De (Drummond and Vowler 2011): Fig 1. Many different datasets can lead to the same bar graph. The full data may suggest different conclusions from the summary statistics. The means and SEs for the four example datasets shown in Panels B–E are all within 0.5 units of the means and SEs shown in the bar graph (Panel A). p-values were calculated in R (version 3.0.3) using an unpaired t-test, an unpaired t-test with Welch’s correction for unequal variances, or a Wilcoxon rank sum test. - In Panel B, the distribution in both groups appears symmetric. Although the data suggest a small difference between groups, there is substantial overlap between groups. - In Panel C, the apparent difference between groups is driven by an outlier. - Panel D suggests a possible bimodal distribution. Additional data are needed to confirm that the distribution is bimodal and to determine whether this effect is explained by a covariate. - In Panel E, the smaller range of values in group two may simply be due to the fact that there are only three observations. Additional data for group two would be needed to determine whether the groups are actually different. A continuación presentamos algunas opciones gráficas que surgen de la combinación de medidas de posición y de dispersión. #Aprovechamos para customizar el `theme` a nuestro gusto y agregar algunos detalles: p0 &lt;- iris %&gt;% ggplot(aes(x=Species, y=Sepal.Length)) + labs(x = &quot;Iris species&quot;, y =&quot;Sepal length (cm)&quot;) + theme_light(base_size = 10) 6.1.1 Observaciones + media / mediana p1 &lt;-iris %&gt;% ggplot(aes(x=Species, y=Sepal.Length)) + geom_point(shape = 1, alpha=0.2)+ stat_summary(fun.y = mean, #median fun.ymin= mean, fun.ymax = mean, geom = &quot;point&quot;, size = 2)+ theme_light(base_size = 10)+ ggtitle(&quot;Observaciones (points) &amp; media&quot;) p1 # geom_dotplot(aes(fill = Species), # Use fill = Species here not in ggplot() # binaxis = &quot;y&quot;, # which axis to bin along # binwidth = 0.1, # Minimal difference considered diffeerent # stackdir = &quot;center&quot; # Centered # ) p2 &lt;- iris %&gt;% ggplot(aes(x=Species, y=Sepal.Length)) + geom_jitter(width = 0.2, alpha=0.2)+ stat_summary(fun.y = mean, #median fun.ymin= mean, fun.ymax = mean, geom = &quot;crossbar&quot;, size = 0.5)+ theme_light(base_size = 10)+ ggtitle(&quot;Observaciones (jitter) &amp; media&quot;) p2 6.1.2 Barplot + SE p3 &lt;-iris %&gt;% ggplot(aes(x=Species, y=Sepal.Length)) + # geom_bar(stat=&quot;identity&quot;) + stat_summary(fun.y=mean, position=position_dodge(width=0.95),geom=&quot;bar&quot;, colour=&quot;black&quot;,fill=&quot;grey90&quot;)+ stat_summary(fun.data=mean_cl_normal, geom=&quot;errorbar&quot;, width=0.2) + theme_light(base_size = 10)+ ggtitle(&quot;Barplot &amp; SEM&quot;) # geom_text(data= let, aes(label = M, x= trt, y=1, hjust=0.5),size = 4) p3 6.1.3 Box-plot p4 &lt;-iris %&gt;% ggplot(aes(x=Species, y=Sepal.Length)) + geom_boxplot(fill = &quot;grey90&quot;) + theme_light(base_size = 10)+ ggtitle(&quot;Boxplot &amp; mean&quot;) p4 6.1.4 Violin plot p5 &lt;-iris %&gt;% ggplot(aes(x=Species, y=Sepal.Length)) + geom_violin(trim=FALSE,fill = &quot;grey90&quot;)+ theme_light(base_size = 10)+ ggtitle(&quot;Violin plot&quot;) p5 6.1.5 Media &amp; dispersión p6 &lt;-iris %&gt;% ggplot(aes(x=Species, y=Sepal.Length)) + stat_summary(fun.y=&quot;mean&quot;, geom=&quot;point&quot;, size=2)+ stat_summary(fun.data = mean_se, geom = &quot;errorbar&quot;, width=0.2)+ stat_summary(fun.data= mean_sdl, geom = &quot;errorbar&quot;, color=&quot;red&quot;, width=0.2)+ stat_summary(fun.data = mean_cl_boot, geom = &quot;errorbar&quot;, color=&quot;blue&quot;, width=0.2)+ theme_light(base_size = 10)+ ggtitle(&quot;Media + SE (negro) / SD (rojo) / 95% CI (negro)&quot;) p6 cowplot::plot_grid(p1, p2, p3, p4, p5, p6, ncol = 3, nrow = 2) Siguiendo el tutorial, reproducir el graficos de los 5 grupos, de observaciones independientes. Referencias "],
["datasets.html", "7 Datasets 7.1 canola 7.2 soja", " 7 Datasets Algunos set de datos que usaremos en el curso: 7.1 canola 7.2 soja Red de ensayos de fungicidas para el control de mancha anillada en soja study: identificador arbitrario para cada experimento year: año del experimento location: localidad del experimento cultivar: cultivar de soja utilizado fungic: tratamiento fungicida block: repeticiones sev: severidad (%) evaluada en R6 yield: rendimiento en madurez fisiológica (kg/ha) "],
["ref.html", "8 Referencias", " 8 Referencias "]
]
